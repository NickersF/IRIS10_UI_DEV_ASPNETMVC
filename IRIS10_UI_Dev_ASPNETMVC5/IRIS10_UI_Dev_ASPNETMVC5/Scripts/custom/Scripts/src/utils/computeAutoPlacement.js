var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import getBoundaries from '../utils/getBoundaries';
function getArea(_a) {
    var width = _a.width, height = _a.height;
    return width * height;
}
/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
export default function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement, padding) {
    if (padding === void 0) { padding = 0; }
    if (placement.indexOf('auto') === -1) {
        return placement;
    }
    var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
    var rects = {
        top: {
            width: boundaries.width,
            height: refRect.top - boundaries.top,
        },
        right: {
            width: boundaries.right - refRect.right,
            height: boundaries.height,
        },
        bottom: {
            width: boundaries.width,
            height: boundaries.bottom - refRect.bottom,
        },
        left: {
            width: refRect.left - boundaries.left,
            height: boundaries.height,
        },
    };
    var sortedAreas = Object.keys(rects)
        .map(function (key) { return (__assign(__assign({ key: key }, rects[key]), { area: getArea(rects[key]) })); })
        .sort(function (a, b) { return b.area - a.area; });
    var filteredAreas = sortedAreas.filter(function (_a) {
        var width = _a.width, height = _a.height;
        return width >= popper.clientWidth && height >= popper.clientHeight;
    });
    var computedPlacement = filteredAreas.length > 0
        ? filteredAreas[0].key
        : sortedAreas[0].key;
    var variation = placement.split('-')[1];
    return computedPlacement + (variation ? "-" + variation : '');
}
//# sourceMappingURL=computeAutoPlacement.js.map